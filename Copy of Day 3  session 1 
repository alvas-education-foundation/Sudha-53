{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Day 3  session 1 ","provenance":[{"file_id":"https://github.com/alvas-education-foundation/Dhavala27/blob/master/Day_3_session_1.ipynb","timestamp":1595507395425}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"Mv_kbdSWxi1O","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"rJZVvKxvx7_W","colab_type":"text"},"source":["#Pythonic code workshop Day 3 session 1 Rules for Good code in Python.ipynb"]},{"cell_type":"code","metadata":{"id":"i_fM6ncUx-ZL","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"c99eeff4-d118-47fc-f584-1b1c7b891cee"},"source":["#Program for prime number -bad code\n","\n","i=25\n","for x in range(2, i//2+1):\n","      if i%x==0:\n","         print(\"The number {} is not prime\".format(i))\n","         break\n","if x ==i//2:\n","   print (\"{} is a prime number\".format(i))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["The number 25 is not prime\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"C7VJQdl0yKqz","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"e2db88ff-3a51-4eaf-d3f2-a4d27ddb0553"},"source":["#Good code using for... else\n","\n","i=25\n","for x in range(2, i//2+1):\n","      if i%x==0:\n","         print(\"The number {} is not prime\".format(i))\n","         break\n","else:\n","    print (\"{} is a prime number\".format(i))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["The number 25 is not prime\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"IrVglLFHylss","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":54},"outputId":"2b75ccf2-1168-48dc-ec9c-ea6ff1209668"},"source":["#Using Unpacking to Write Concise Code\n","#Packing and unpacking are powerful Python features. You can use unpacking to assign values to your variables:\n","a, b = 2, 'my-string'\n","print(a)\n","print(b)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2\n","my-string\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"fW4gBsx7ywOC","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"1c162b21-fc3f-4bed-be0e-dcd0e9458dee"},"source":["#Bad unpacking\n","x = (1, 2, 4, 8, 16)\n","a = x[0]\n","b = x[1]\n","c = x[2]\n","d = x[3]\n","e = x[4]\n","print(a, b, c, d, e)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1 2 4 8 16\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nS5HCqzBy0NC","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"5ee00c24-8e81-485c-b6da-d030af1a27e1"},"source":["#Excellent unpacking\n","a,b,c,d,e=x\n","print(a, b, c, d, e)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1 2 4 8 16\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"-XsCB1JDy5P6","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":72},"outputId":"a7f768da-175a-41e1-d893-536d4d501f4a"},"source":["#unpacking some elements\n","a, *y, e = x\n","print(a)\n","print(y)\n","print(e)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1\n","[2, 4, 8]\n","16\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g94rS9w_zAv5","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"62387176-2441-4a22-f6b3-5ce4dbc905b1"},"source":["#Python allows you to chain the comparison operations. So, you donâ€™t have to use and to check if two or more comparisons are True:\n","#Using Chaining to Write Concise Code\n","x = 4\n","print(x >= 2 and x <= 8)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["True\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ec5f7Cz1zNhZ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":54},"outputId":"af7d2319-2189-407e-c978-7e0bb1870e85"},"source":["#Instead, you can write this in a more compact form, like mathematicians do:\n","print(2 <= x <= 8)\n","print(2 <= x <= 3)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["True\n","False\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"jqDekCoczRRS","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"f4fe7cd0-bfb1-4079-ab8c-080f7dd7ee88"},"source":["#chained assignments\n","x = y = z = 2\n","x, y, z # when we use , it becomes tuple\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(2, 2, 2)"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"vUyvkknyzYWh","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":90},"outputId":"f542afaa-8b6a-40ce-adba-2a54692bef37"},"source":["#Checking against None\n","# normal way\n","x, y = 2, None\n","print(x == None)\n","print(y == None)\n","print(x != None)\n","print(y != None)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["False\n","True\n","True\n","False\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"uDElzfwnzcF6","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":90},"outputId":"6463376c-b0ab-4a23-9f49-2c2ceef4c3d6"},"source":["#In pythonic way\n","x is None\n","print(x is None)\n","print(y is None)\n","print(x is not None)\n","print(y is not None)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["False\n","True\n","True\n","False\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"qwXIqumazfa5","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":108},"outputId":"b70692bd-48de-4afb-a792-33661eb0b3b0"},"source":["#Iterating over Sequences\n","x = [1, 2, 4, 8, 16]\n","for i in range(len(x)):\n","  print(x[i])\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1\n","2\n","4\n","8\n","16\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"g5kFfXyezlpR","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":108},"outputId":"d23daaee-0a20-4a8a-af9c-4482f194165a"},"source":["#But instead we can do like this in elegant way\n","for item in x:\n","  print(item)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1\n","2\n","4\n","8\n","16\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"2711vF-ezplS","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":108},"outputId":"843d86fb-b231-4d93-af15-63d159d035ba"},"source":["#to iterate in the reversed order\n","for i in range(len(x)-1, -1, -1):\n","  print(x[i])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["16\n","8\n","4\n","2\n","1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"dUcHeyVezvZb","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":108},"outputId":"fc1d67cd-c0cd-4efc-e61e-9e43276fd0dc"},"source":["#But in elegant way!\n","for item in x[::-1]:\n","  print(item)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["16\n","8\n","4\n","2\n","1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ZdQDMUzhz2Kz","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":108},"outputId":"16aa2523-94b0-4147-d3d1-2c3cf3850012"},"source":["#The Pythonic way is to use reversed to get an iterator that yields the items of a sequence in the reversed order:\n","for item in reversed(x):\n","  print(item)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["16\n","8\n","4\n","2\n","1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"dIH7vVxWz_jR","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":108},"outputId":"67a81ace-482f-4f7d-ff6c-893df8fb813d"},"source":["#Sometimes you need both the items from a sequence and the corresponding indices:\n","for i in range(len(x)):\n","  print(i, x[i])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0 1\n","1 2\n","2 4\n","3 8\n","4 16\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"HCdHnSFI0HJ5","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":108},"outputId":"58fc62aa-0f2c-4ab6-acc5-58efe2e91741"},"source":["#Itâ€™s better to use enumerate to get another iterator that yields the tuples with the indices and items:\n","for i, item in enumerate(x):\n","  print(i, item)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0 1\n","1 2\n","2 4\n","3 8\n","4 16\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"SDI2obTp0Lpp","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":108},"outputId":"6ea1b5cd-29d7-4c05-b7d5-f64f1a5a1e52"},"source":["#what if you want to iterate over two or more sequences? Of course, you can use the range again:\n","y = 'abcde'\n","for i in range(len(x)):\n","  print(x[i], y[i])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1 a\n","2 b\n","4 c\n","8 d\n","16 e\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vSo8l-Y60TpZ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":108},"outputId":"253111b6-5dfc-4101-ec51-9365491eba88"},"source":["#In this case, Python also offers a better solution. You can apply zip and get tuples of the corresponding items:\n","for item in zip(x, y):\n","  print(item)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(1, 'a')\n","(2, 'b')\n","(4, 'c')\n","(8, 'd')\n","(16, 'e')\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"mjoJHTi40ayR","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":108},"outputId":"b71f9047-004c-45a4-c060-d9238247accb"},"source":["#You can combine it with unpacking:\n","for x_item, y_item in zip(x, y):\n","  print(x_item, y_item)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1 a\n","2 b\n","4 c\n","8 d\n","16 e\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"8C_UD-uv0etx","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":54},"outputId":"d1c910d8-845c-40a2-a235-21d32fb2e451"},"source":["#Dictionary can be iterated in these two ways\n","z = {'a': 0, 'b': 1}\n","for k in z:\n","  print(k, z[k])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["a 0\n","b 1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"dik8GeIx0maJ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":90},"outputId":"1d63e0b7-100e-4ddd-d999-0fa5de20972d"},"source":["#When you have numeric data, and you need to check if the numbers are equal to zero, you can but donâ€™t have to use the comparison operators\n","#== and !=:Comparing to Zero\n","#To print only non zero values from tuple x\n","x = (1, 2, 0, 3, 0, 4)\n","for item in x:\n","    if item != 0:\n","      print(item)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["1\n","2\n","3\n","4\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_y17VDdu0u_5","colab_type":"code","colab":{}},"source":["#The Pythonic way is to exploit the fact that zero is interpreted as False in a Boolean context, while all other numbers are considered as True:\n","\n","bool(0)- False\n","bool(-1), bool(1), bool(20), bool(28.4) - (True, True, True, True)\n","for item in x:\n","  if item:\n","    print(item)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"atMW-tiS07p7","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"4a427e67-a4e0-44f2-d12b-32579df4b59f"},"source":["#Avoiding Mutable Optional Arguments\n","def func(value, seq=[]):\n","  seq.append(value)\n","  return seq\n","print(func(value=2))\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[2]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"teGipZBQ1Cfg","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":35},"outputId":"29acdb1b-dbcc-432f-a7cd-9007274e2c0d"},"source":["#keep away from that with some additional logic.\n","def func(value, seq=None):\n","  if seq is None:\n","    seq = []\n","    seq.append(value)\n","    return seq\n","print(func(value=6))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[6]\n"],"name":"stdout"}]}]}